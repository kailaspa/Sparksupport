package com.sparksupport.product.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.sparksupport.product.dto.ProductDto;
import com.sparksupport.product.entity.Product;
import com.sparksupport.product.service.ProductService;

import jakarta.validation.Valid;

/**
 * Controller class for managing product-related operations.
 */
@RestController
@Validated
public class ProductController {

	@Autowired
	private ProductService productService;

	/**
	 * Adds a new product.
	 *
	 * @param product The product to add
	 * @return ProductDto representing the added product
	 */
	@PreAuthorize("hasRole('ADMIN')")
	@PostMapping("/addProduct")
	public ResponseEntity<ProductDto> addProduct(@Valid @RequestBody Product product) {

		ProductDto productDto = productService.addProduct(product);
		return new ResponseEntity<>(productDto, HttpStatus.CREATED);
	}

	/**
	 * Retrieves all products with optional pagination.
	 *
	 * @param pageable Pageable object for pagination
	 * @return Page of ProductDto containing products
	 */
	@GetMapping("/products")
	public ResponseEntity<Page<ProductDto>> getAllProducts(Pageable pageable) {

		Page<ProductDto> products = productService.getAllProducts(pageable);
		return new ResponseEntity<>(products, HttpStatus.OK);
	}

	/**
	 * Retrieves a product by its ID.
	 *
	 * @param id The ID of the product to retrieve
	 * @return ProductDto representing the retrieved product
	 */
	@GetMapping("/product/{id}")
	public ResponseEntity<ProductDto> getProductById(@PathVariable("id") int id) {
		ProductDto productDto = productService.getProductById(id);
		return new ResponseEntity<>(productDto, HttpStatus.OK);
	}

	/**
	 * Updates a product with the specified ID.
	 *
	 * @param id      The ID of the product to update
	 * @param product The updated product details
	 * @return ProductDto representing the updated product
	 */
	@PreAuthorize("hasRole('ADMIN')")
	@PutMapping("/update/{id}")
	public ResponseEntity<ProductDto> updateProduct(@PathVariable("id") int id, @RequestBody Product product) {
		ProductDto updatedProduct = productService.updateProduct(id, product);
		return new ResponseEntity<>(updatedProduct, HttpStatus.OK);
	}

	/**
	 * Deletes a product with the specified ID.
	 *
	 * @param id The ID of the product to delete
	 * @return A message indicating the result of the deletion
	 */
	@PreAuthorize("hasRole('ADMIN')")
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<String> deleteProduct(@PathVariable("id") int id) {
		String result = productService.deleteProduct(id);
		return new ResponseEntity<>(result, HttpStatus.NO_CONTENT);
	}

	/**
	 * Retrieves the total revenue generated by all sales.
	 *
	 * @return Total revenue from all product sales.
	 */
	@GetMapping("/total-revenue")
	public ResponseEntity<String> getTotalRevenue() {
		// double totalRevenue = productService.getTotalRevenue();
		String totRevenue = String.format("%.2f", productService.getTotalRevenue()); // Rounded to 2 decimal digits
		return new ResponseEntity<>("Totoal Revenu: " + totRevenue, HttpStatus.OK);
	}

	/**
	 * Retrieves the total revenue generated by the specified product.
	 *
	 * @param id The ID of the product to calculate revenue for
	 * @return Total revenue for the specified product.
	 */
	@GetMapping("/total-revenue/{id}")
	public ResponseEntity<String> getTotalRevenueById(@PathVariable("id") int id) {
		// double totalRevenue = productService.getRevenueByProduct(id);
		String totRevenue = String.format("%.2f", productService.getRevenueByProduct(id)); // Rounded to 2 decimal
																							// digits
		return new ResponseEntity<>("Total Revenue for id: " + id + " is " + totRevenue, HttpStatus.OK);
	}
}
